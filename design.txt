Dependeny declarations
======================

All dependencies are declared in lines as "before" - "after" examples:

a b
b c

means "a" must become before "b" and "b" must become before "c".

Besides actual dependency items like "a" and "b" there are so-called "dependency groups" represented by virtual group markers.

For each dependency item "a" there is also a group to which "a" belongs, identified by the group markers "^a" and "a$".

Whenever a dependency "a" exists, the system will automatically synthesize the following dependency declarations:

^a a
a a$

In other words, "^a" precedes "a" and "a$" follows "a".

Groups represent optional dependencies. When writing

a b

then "a" *needs* to be started before "b". However, when writing

a$ b

then just "the group belonging to a" must precede "b", not necessarily "a" itself: When a dependency "a" does not actually exist, it is still possible to refer to its group markers. Markers, like all dependencies, spring into existend by merely mentioning them as dependencies.

Other than real dependencies, group markers will never actually be tried to run, so there is no problem if the dependency after which the group is named does not exist.

In order to avoid that dependency declarations for some item need to refer to the name of the item explicitly, there are a few shortcuts.

When some item "a" is queried for its dependencies, "@" is an alias for "a" itself, while "^@" is an alias for "^a" and "@$" is an alias for "a$".

One problem arises when representing runlevels this way, because the same item could be part of many runlevels, yet all dependencies must declare a struct ordering without any loops.

In order to solve this problem, automatic aliases can be generated for every dependency.

For instance, if a dependency "sshd" needs to be a member of both "runlevel_3" and "runlevel_5", it can define the following dependencies:

^runlevel_1 @#@#1
@#@#1 runlevel_1$
^runlevel_5 @#@#5
@#@#5 runlevel_5$

A "#" when present within the name of a dependency starts a part that will be considered while the dependencies are being calculated, but will be stripped after that.

Therefore "@#@#1" as declared by some dependency "a" will expand to "a#a#1" and, after dependency calculation is finished, will be stripped down to just "a".

The inclusion of "@" as part of the stripped name results in something like a namespace, because "foo#@#1" declared by a dependency "a" will expand to "foo#a#1", while the same expression declared by a dependency "b" will expand to "foo#b#1" and thus avoid a possible name collision.

Of course, as long as "@" is already used before the "#" collisions cannot occur anyway, so the above could be written equally safe as

^runlevel_1 @#1
@#1 runlevel_1$
^runlevel_5 @#5
@#5 runlevel_5$

However, when referencing aliases for *other* dependencies, it is a good idea to include a "@" in the part after the "#" as well in order to guarantee uniqueness.

The system also supports UUID-Naming.

UUID-naming is performed by appending the name with a "-" followed by a UUID. In this case, the part of the name before the last "-" is stripped for dependency calculation, so only the UUID part is used.

Actually, the part before the "-" is not stripped, but rather *replaced* be the real name of the dependency (its file name) which also uses that UUID after the last "-" as part of its file name.

Using UUID-based names is optional, but has the advantage that scripts can be renamed (except for the UUID-part of course) and dependency declarations using the old names continue to work.

For instance, if a dependency "a" declares

b-123 a

meaning "b-123" is required before "a" but "b-123" has been renamed into "banana-123" in the meantime, the declaration will still work because the UUID "123" remained the same.

Of course, this is just an example and "123" is a bad choice for a UUID - in reality something like a DCE UUID (but without any dashes!) should be used as a UUID.

However, and randomly-generated string long enough to make a collision highly unlikely is good enough as a UUID.

Consider, however, that not all filesystems preserve or distinguish letter case - a BASE-16 or BASE-32 encoding using only lower- or uppercase might thus be fine, but a BASE-64 encoding using both upper- and lowercase characters might create problems.

On the other hand, if you know that you will be always using a filesystem with POSIX semantics, BASE-64 is fine.

Also, when searching for "-" as part of UUIDs, "#"-characters separate seaches. This means that when a depenceny "a-123" (but the real name of the dependency is "alpha-123") uses the string "@#@", it will be replaced by "alpha-123#alpha-123" and not by "alpha-123" which would be the case if "#" had just be considered a normal character which was part of the name to be ignored because it was followed by a "-".

So, let's recap the special characters:

^a

is the virtual marker item opening the group created by dependency "a".

a$

is the virtual marker item closing the group created by dependency "a".

@

is replaced by the name of the dependency where the declarations occur, and it replaced whereever this character occurs even if it occurs multiple times within the same string.

#

allows to augment the actual name of a dependency be adding a string, and the result will undergo dependency calculation.

However, once the calculation is done, the "#" and all characters following it will be stripped, so "a#bc" will refer to the the same dependency as just "a".

-

separates a prefix of the dependency name within a declaration from the UUID of the dependency. The part before the "-" will be replaced by the real name of the dependeny, i. e. its actual file name, having the same UUID. The replacement is made separately for every substring within the dependency name separated by "#" (if any).

Be careful with "@" - using "@@" as part of a decaration declared by dependency "a" will just be expanded as "aa", which could be confused with a dependency "aa". Therefore, always insert separators where necessary, such as "@-@" which will expand as "a-a" and thus be less problematic.

Although all the special characters except for "@" are only special at specific places within a dependency name ("^" only at its beginning, "$" only at its end, only the first "#" within a name) it it still recommended to avoid using the special characters as part of any normal dependency name.

